stages:
  - build
  - deploy

variables:
  APPLICATION_NAME: mevn-crud
  CONTAINER_REGISTRY_URL: 732469118990.dkr.ecr.ap-northeast-1.amazonaws.com
  CONTAINER_IMAGE: ${CONTAINER_REGISTRY_URL}/${APPLICATION_NAME}:${CI_COMMIT_SHORT_SHA}
  NODEPORT: 30683
  K8S_ECR_SECRET: ecr-credentials
  K8S_NAMESPACE: education

build:
  stage: build
  script:
    # Create repository if needed
    - >
      aws ecr create-repository --repository-name ${APPLICATION_NAME}
      || echo "Repository might have already existed"
    # Log in to the registry (AWS credentials are stored as GitLab env variables)
    - >
      aws ecr get-login-password
      | docker login
      --username AWS
      --password-stdin ${CONTAINER_REGISTRY_URL}
    # Build the container image
    - docker build -t ${CONTAINER_IMAGE} .
    # Build and push container image to registry
    - docker push ${CONTAINER_IMAGE}
    # Cleanup
    - docker image rm ${CONTAINER_IMAGE}

deploy:
  stage: deploy  
  script:
    # Create namespace if it does not exist yet
    - kubectl create namespace ${K8S_NAMESPACE} || echo "Namespace might have already existed"
    # Create a secret with ECR credentials for K8s to pull
    # Here, we use apply to update it
    # https://stackoverflow.com/questions/47369351/kubectl-apply-vs-kubectl-create
    - >
      kubectl create secret docker-registry ${K8S_ECR_SECRET}
      --docker-server=${CONTAINER_REGISTRY_URL}
      --docker-username=AWS
      --docker-password $(aws ecr get-login-password)
      --dry-run=client -o yaml
      | kubectl apply -f -
    # create/update the deployment
    - envsubst < kubernetes_manifest.yml | kubectl apply -f -
  environment:
    name: production
    kubernetes:
      namespace: ${K8S_NAMESPACE}
